################################################################################
###  SBND Continuous Integration test configuration
################################################################################
#
# Many tests execute the same test driver script (EXPSCRIPT_SBNDCODE) with
# different command line arguments.
# The script is currently just delegating the task to a template script provided
# by lar_ci UPS product.
# 
# For a lengthy explanation of why the script path is not specified, see
# test/ci/CMakeFiles.txt. What is relevant here is that this should allow the
# execution of the integration tests from command line on both development and
# running environment, but using a different command line. For the execution
# environment:
#     
#     test_runner -l # or whatever options you would normally use
#     
# while in the development environment one needs to point the script to the
# location of the integration test configuration file:
#     
#     test_runner --config "${SBNDCODE_DIR}/test/ci/ci_tests.cfg" -l # or whatever options you would normally use
#     
# 
# The convention here is that lower case variables are special variables that
# are used by the C.I. system (usually, the test_runner script), while the
# upper case variables are our own. Note that these variable names should be
# marked with a SBND tag not to conflict with others from the additional tests
# that are queued together with these ones.
# 

[DEFAULT]
# the number of events to process in the sequental test
SEQ_NEVENTS=5

# enable running the test jobs, the product presence check and the check of their size
RUN_TEST_SBNDCODE=1
CHECK_PRODUCTS_SBNDCODE=1
CHECK_PRODUCT_SIZE_SBNDCODE=1

# file paths:
# - relative path defining the location of all SBND integration test data
BASEFILERELPATH_SBNDCODE=sbnd/persistent/ContinuousIntegration
# - absolute path with direct POSIX access to dCache
BASEFILEDIR_SBNDCODE=/pnfs/%(BASEFILERELPATH_SBNDCODE)s
# - absolute path with XRootD access to dCache
XROOTD_BASEFILEDIR_SBNDCODE=xroot://fndca1.fnal.gov:1094/pnfs/fnal.gov/usr/%(BASEFILERELPATH_SBNDCODE)s
# - the subdirectory hosting the selected input and reference, and the full paths (both POSIX and XRootD)
PERIODTAG_SBND=current
INPUTFILEDIR_SBNDCODE=%(BASEFILEDIR_SBNDCODE)s/input/%(PERIODTAG_SBND)s
XROOTD_INPUTFILEDIR_SBNDCODE=%(XROOTD_BASEFILEDIR_SBNDCODE)s/input/%(PERIODTAG_SBND)s
REFERENCEFILEDIR_SBNDCODE=%(BASEFILEDIR_SBNDCODE)s/reference/%(PERIODTAG_SBND)s
XROOTD_REFERENCEFILEDIR_SBNDCODE=%(XROOTD_BASEFILEDIR_SBNDCODE)s/reference/%(PERIODTAG_SBND)s

# build_identifier and build_platform are passed by the C.I. system
# IDENTIFIER_SBNDCODE=${build_identifier}
# PLATFORM_SBNDCODE=${build_platform}
IDENTIFIER_SBNDCODE=
PLATFORM_SBNDCODE=
REF_SBNDCODE=Reference%(PLATFORM_SBNDCODE)s%(IDENTIFIER_SBNDCODE)s
CUR_SBNDCODE=Current%(PLATFORM_SBNDCODE)s%(IDENTIFIER_SBNDCODE)s

# the test mask collects check requests in a single string
TESTMASK_SBNDCODE=%(RUN_TEST_SBNDCODE)s%(CHECK_PRODUCTS_SBNDCODE)s%(CHECK_PRODUCT_SIZE_SBNDCODE)s

# this is the script we use for most of the tests (using our own until the template one supports no art ROOT output)
# EXPSCRIPT_SBNDCODE=ci_regression_test_template.sh
EXPSCRIPT_SBNDCODE=ci_regression_test_sbndcode_templateCopy.sh

# arguments used by EXPSCRIPT_SBNDCODE
STDARGS_SBNDCODE_NOOUTPUT=--executable lar --nevents %(NEVENTS)s --stage-name %(STAGE_NAME)s --fhicl %(FHiCL_FILE)s --testmask %(TESTMASK_SBNDCODE)s
STDARGS_SBNDCODE=%(STDARGS_SBNDCODE_NOOUTPUT)s --outputs %(OUTPUT_STREAM)s

# outputdest=/pnfs/sbnd/scratch/users/${USER}/ci_tests_outputfiles/



################################################################################
###  quick tests sbndcode
################################################################################
#
# The quick tests are recommended to be kept under 3 minutes run-time (wall
# clock) each, not to challenge the endurance of the impatient tester.
# 
# They are independent tests that may require access to the network for
# comparison to reference results ("regression test"), and may therefore be run
# in parallel.
# 
# The input files are accessed via XRootD (with the exception of the generator
# stage, where the small file is fetched from PNFS).
# The reference files are also accessed via XRootD.
#
[test ci_gen_regression_quick_test_sbndcode]
STAGE_NAME=gen
NEVENTS=10
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=0:100
mem_usage_range=100000:400000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_FILE=EmptyEvents_01.root
INPUT_FILES_TO_FETCH=%(INPUTFILEDIR_SBNDCODE)s/empty/%(INPUT_FILE)s
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_FILE)s --input-files-to-fetch %(INPUT_FILES_TO_FETCH)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_g4_regression_quick_test_sbndcode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=50:150
mem_usage_range=200000:800000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(INPUT_STAGE_NAME)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_detsim_regression_quick_test_sbndcode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=100:250
mem_usage_range=200000:1000000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(INPUT_STAGE_NAME)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_reco_basic_regression_quick_test_sbndcode]
STAGE_NAME=reco_basic
INPUT_STAGE_NAME=detsim
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=200:500
mem_usage_range=400000:1500000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(INPUT_STAGE_NAME)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_anatree_regression_quick_test_sbndcode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
# (we use the reference file from sequence explicitly here)
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco_basic
NEVENTS=2
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=10:100
mem_usage_range=300000:800000

script=%(EXPSCRIPT_SBNDCODE)s
FHiCL_FILE=sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=%(XROOTD_INPUTFILEDIR_SBNDCODE)s/%(INPUT_STAGE_NAME)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
TESTMASK_SBNDCODE=%(RUN_TEST_SBNDCODE)s00
TFILENAME=hist-sbnd_ci_sbndcode_quick_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_ANATREE=%(TFILENAME)s
REFERENCE_ANATREE=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/hist-sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
args=%(STDARGS_SBNDCODE_NOOUTPUT)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s --extra-function compare_anatree,%(OUTPUT_ANATREE)s,%(REFERENCE_ANATREE)s
parse_art_output=True
output1=%(TFILENAME)s



[suite quick_test_sbndcode]
testlist=ci_gen_regression_quick_test_sbndcode ci_g4_regression_quick_test_sbndcode ci_detsim_regression_quick_test_sbndcode ci_reco_basic_regression_quick_test_sbndcode ci_anatree_regression_quick_test_sbndcode



################################################################################
###  Sequential tests sbndcode
################################################################################
#
# This test simulates a "standard" simulation + reconstruction chain.
# Due to its sequential nature, this test is expected to be the longest.
# It is recommended that the whole test be kept under 10 minutes run-time
# (wall clock), 3 minutes or less recommended, not to challenge the endurance
# of the impatient tester.
# 
# The sequence goes from an original input file with empty events, that with
# NuRandomService set on 'perEvent' policy shoudl guarantee "perfect"
# reproducibility. The blocks are complicate enough (explanations are in wiki at
# https://cdcvs.fnal.gov/redmine/projects/lar-ci/wiki/Test_Runner_Introduction )
# and they are designed so that a new stage can be added by copying a block
# into a new one and changing:
# - the test name in brackets (of course!)
# - the STAGE_NAME and INPUT_STAGE_NAME variables
# - cpu_usage_range and mem_usage_range will need to be calibrated too
#   (run test_runner once with the --verbose option, check that it succeeded,
#   and use the VAX-GMIP figure "kVs" as a reference to set cpu_usage_range,
#   and the "kb" figure as reference to set mem_usage_range)
#
# The configuration of the command line overrides the TFileService output file
# name ("--TFileName" option) to conform to a simple pattern, as it is also
# internally done by the test script for the art ROOT output file (from
# RootOutput module).
# 
# The input file is fetched from dCache.
# The reference files are accessed via XRootD.
#
[test ci_gen_regression_seq_test_sbndcode]
STAGE_NAME=gen
script=%(EXPSCRIPT_SBNDCODE)s
NEVENTS=%(SEQ_NEVENTS)s
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=0:100
mem_usage_range=100000:500000

FHiCL_FILE=sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_FILE=EmptyEvents_01.root
INPUT_FILES_TO_FETCH=%(INPUTFILEDIR_SBNDCODE)s/empty/%(INPUT_FILE)s
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
# args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_FILE)s --input-files-to-fetch %(INPUT_FILES_TO_FETCH)s --extra-options --TFileName,%(TFILENAME)s
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_FILE)s --input-files-to-fetch %(INPUT_FILES_TO_FETCH)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_g4_regression_seq_test_sbndcode]
STAGE_NAME=g4
INPUT_STAGE_NAME=gen
NEVENTS=%(SEQ_NEVENTS)s
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=50:150
mem_usage_range=300000:1000000

script=%(EXPSCRIPT_SBNDCODE)s
requires=ci_%(INPUT_STAGE_NAME)s_regression_seq_test_sbndcode
FHiCL_FILE=sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=../%(requires)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
# args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_detsim_regression_seq_test_sbndcode]
STAGE_NAME=detsim
INPUT_STAGE_NAME=g4
NEVENTS=%(SEQ_NEVENTS)s
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=50:250
mem_usage_range=500000:1000000

script=%(EXPSCRIPT_SBNDCODE)s
requires=ci_%(INPUT_STAGE_NAME)s_regression_seq_test_sbndcode
FHiCL_FILE=sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=../%(requires)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
# args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_reco_basic_regression_seq_test_sbndcode]
STAGE_NAME=reco_basic
INPUT_STAGE_NAME=detsim
NEVENTS=%(SEQ_NEVENTS)s
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=400:1000
mem_usage_range=800000:1500000

script=%(EXPSCRIPT_SBNDCODE)s
requires=ci_%(INPUT_STAGE_NAME)s_regression_seq_test_sbndcode
FHiCL_FILE=sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=../%(requires)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_STREAM=%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
REFERENCE_FILES=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/%(BASE_FILE_NAME)s_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
TFILENAME=hist-sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
; args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s
args=%(STDARGS_SBNDCODE)s --input-file %(INPUT_STREAM)s --reference-files %(REFERENCE_FILES)s --extra-options --TFileName,%(TFILENAME)s
parse_art_output=True
output1=%(TFILENAME)s


[test ci_anatree_regression_seq_test_sbndcode]
# no reference art ROOT output for this one, but we have analysis tree reference (the "--extra-function" option)
STAGE_NAME=anatree
INPUT_STAGE_NAME=reco_basic
NEVENTS=%(SEQ_NEVENTS)s
# calibrated on sbndbuild01.fnal.gov on 20171108
cpu_usage_range=20:200
mem_usage_range=300000:800000

script=%(EXPSCRIPT_SBNDCODE)s
requires=ci_%(INPUT_STAGE_NAME)s_regression_seq_test_sbndcode
FHiCL_FILE=sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s.fcl
BASE_FILE_NAME=SingleMuon
INPUT_STREAM=../%(requires)s/%(BASE_FILE_NAME)s_%(INPUT_STAGE_NAME)s_%(CUR_SBNDCODE)s.root
TESTMASK_SBNDCODE=%(RUN_TEST_SBNDCODE)s00
TFILENAME=hist-sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s_%(CUR_SBNDCODE)s.root
OUTPUT_ANATREE=%(TFILENAME)s
REFERENCE_ANATREE=%(XROOTD_REFERENCEFILEDIR_SBNDCODE)s/%(STAGE_NAME)s/hist-sbnd_ci_sbndcode_seq_single_%(STAGE_NAME)s_%(REF_SBNDCODE)s.root
args=%(STDARGS_SBNDCODE_NOOUTPUT)s --input-file %(INPUT_STREAM)s --extra-options --TFileName,%(TFILENAME)s --extra-function compare_anatree,%(OUTPUT_ANATREE)s,%(REFERENCE_ANATREE)s
parse_art_output=True
output1=%(TFILENAME)s



[suite seq_test_sbndcode]
testlist=ci_gen_regression_seq_test_sbndcode ci_g4_regression_seq_test_sbndcode ci_detsim_regression_seq_test_sbndcode ci_reco_basic_regression_seq_test_sbndcode ci_anatree_regression_seq_test_sbndcode

################################################################################
