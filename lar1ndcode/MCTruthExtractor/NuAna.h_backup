////////////////////////////////////////////////////////////////////////
/// \file NuAna.h                                                       
//                                                                     
/// \author roxanne.guenette@yale.edu    
//	\author corey.adams@yale.edu      
//	
//	This module reads in genie and (optionally) larg4 data.
//	It has 3 broad cases:
//	
//	CC Events
//		Nu_e events are full simulated.  This is tagged as category 1.
//		Nu_mu events are not fully simulated unless there is a pi0 or gamma in the final state particles
//			If there is no pi0 or gamma, the muon only is simulated and is category 2
//			Else, there is pi0 or gamma, and everything is simulated.  Category 3
//	
//	
//	NC Events
//		NC events are NOT simulated, unless there is a pi0 or gamma in the final state particles
//			NC without pi0 or gamma is category 4.
//			NC with pi0 or gamma is category 5.
//	
//	FullOsc Events
//		Events from the full osc file ONLY have final state particles.  Category 6
//	
//	Take a look at the variables below for more explanation of what is kept and filled.
//	
////////////////////////////////////////////////////////////////////////       

#ifndef GAN_NUANA_H
#define GAN_NUANA_H

#include "Geometry/Geometry.h"
#include "art/Framework/Core/EDAnalyzer.h"
#include <TTree.h>
#include <vector>
#include <math.h>
#include <iomanip>
#include <iostream>

#include "TH1.h"
#include "TH2.h"

#include "TSystem.h"
#include "TRandom.h"
#include "TLorentzVector.h"
#include "TVector3.h"
// #include "GENIEextractor/TLorentzVector.h"

#include "SimulationBase/MCFlux.h"
#include "SimulationBase/MCNeutrino.h"
#include "SimulationBase/MCTruth.h"
#include "SimulationBase/MCParticle.h"
#include "SummaryData/POTSummary.h"


#include "TDatabasePDG.h"


// Framework includes	
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "messagefacility/MessageLogger/MessageLogger.h"
#include "fhiclcpp/ParameterSet.h"

#include "TROOT.h"


#include "Geometry/Geometry.h"

class TH1F;
class TH2F;
class TTree;


namespace lar1nd {
  /// A module to extract the info from the Monte Carlo generator GENIE
  class NuAna : public art::EDAnalyzer {
  public:

    explicit NuAna(fhicl::ParameterSet const& pset);
    virtual ~NuAna();
    void beginJob();    
    void reconfigure(fhicl::ParameterSet const& pset);
    void analyze(const art::Event& evt);
    void beginSubRun (const art::SubRun& subrun);
    void reset();
    
    void GetPhotonConversionInfo(simb::MCParticle& photon, TLorentzVector& ConversionPos, TLorentzVector& ConversionMom);
    simb::MCParticle getParticleByID(art::Handle< std::vector<simb::MCParticle> > & mclistLARG4, int );
    simb::MCParticle getParticleByPDG(art::Handle< std::vector<simb::MCParticle> > & mclistLARG4, int );
    // TLorentzVector makeLVL( TLorentzVector&);
    // TLorentzVector makeLVL(const TLorentzVector&);
    bool isInTPC(TVector3) const;
        
  private:

	//important PDG codes:
	const int pi0ID		= 111;
	const int gammaID	= 22;

	//Variables needed from the .fcl file to get things out of the event
    std::string fGenieModuleLabel;
    std::string fLarg4ModuleLabel;

    //Other variables from the .fcl file
    std::string fMode;			//mode is beam mode, nu or nubar
    double fBaseline;			//baseline is 100, 470, or 700 meters
    bool fFullOscTrue;			//fullosctrue is obvious.
    
    std::vector<float> eventWeights;  //1000 event weights to study systematic uncertainties
        
	double xlow, xhigh, ylow, yhigh, zlow, zhigh;		//dimensions of the detector.

    TTree* fTreeTot;	//This tree stores all the important information from an event
    TTree* PoTTree;		//This tree only stores the POT of the file, nothing else.

    TLorentzVector  neutMom;

	//Track the muon, if there is one.
	//If there is no muon, these vectors will be size 0
    std::vector< TLorentzVector > muonPos;
    std::vector< TLorentzVector > muonMom;
    
    //Track the electron, if there is one.
	//If there is no muon, these vectors will be size 0
    std::vector< TLorentzVector > electronPos;
    std::vector< TLorentzVector > electronMom;
    
    //
    int NPi0FinalState;		//Number of neutral pions in Final State Particles
    int NPi0;				//Number of neutral pions in larg4, which could be different
    int NGamma; 			//Number of gammas in the Final State Particles
    int NChargedPions;
    
    bool foundAllPhotons;	//True by default, goes to false ONLY if there are final state 
    						//photons that the alg didn't find in the larg4 particle list
    
    // Keep track of where photons convert and what their energy is.
    // Except in categories 1, 3, 5, these are probably not filled.
    // The vectors here labeled p1 and p2 keep track only of photons from neutral pion decay
    std::vector< TLorentzVector >	p1PhotonConversionPos;	// Store the position of conversion
    std::vector< TLorentzVector >	p1PhotonConversionMom;	// Store the momentum 4vector at conversion
    std::vector< TLorentzVector >	p2PhotonConversionPos;	// Store the position of conversion
    std::vector< TLorentzVector >	p2PhotonConversionMom;	// Store the momentum 4vector at conversion
    
    // These vectors keep track of any other photon conversions we need to look at.
    std::vector< TLorentzVector >	miscPhotonConversionPos;	// Store the position of conversion
    std::vector< TLorentzVector >	miscPhotonConversionMom;    // Store the momentum 4vector at conversion
    
    std::vector< std::vector < TLorentzVector > > chargedPionPos; // store position of charged pions
    std::vector< std::vector < TLorentzVector > > chargedPionMom; // store momentum of charged pions

    std::vector< int > chargePionSign;  // Sign (+/-) of the charged pions, one to one with above vectors

    // Track any pions
    // Only keeping the position of decay and the momentum at decay
	std::vector< TLorentzVector > pionPos;	// Position at decay
    std::vector< TLorentzVector > pionMom;	// Momentum at decay
    
    //Info from the genie truth:
    std::vector<int>    GeniePDG;       // Contains the pdg of the FSP in genie generated
    std::vector<double> GenieE;         // Energy of particles in genie FSP
    std::vector<double> GeniePx;        // Contains the x momentum of the particles in genie
    std::vector<double> GeniePy;        // Contains the y momentum of the particles in genie
    std::vector<double> GeniePz;        // Contains the z momentum of the particles in genie   
    std::vector<std::string> GenieProc; // Contains the process information 


    int iflux;  // represents the sample, 0 = nu, 1 = nu_fosc, 2 = nubar, 3 = nubar_fosc
    int ibkg;	// A bit outdated, represents what type of background an event might be
    int nuchan;	// Type of neutrino interaction
    int inno;	// Type of neutrino, PDG code.  Not sure why it's call inno...
    int parid;	// ID of the parent, for flux reweighing
    int ndecay;	// Type of decay, for flux reweighing
    int isCC;	// isCC event? isCC == 1 means CC, isCC == 0 means NC
    int mode;	// beam mode
    double enugen,energy;			// Energy of the neutrino (both)
    double nuleng;					// Length the neutrino traveled. 
    double wgt;						// Some weighting function, not filled here (but used in ntuples)
    double Vx,Vy,Vz;				// Vertex location
    double Vdist;					// Not sure why this is here...
    double ParVx, ParVy, ParVz;		// Parent Vertex (not in detector)
    double ParPx, ParPy, ParPz;		// Parent Momentum
    double pdpx, pdpy, pdpz;        // nu parent momentum at the time of decay
    double pppx, pppy, pppz;        // nu parent momentum at production point
    double tpx, tpy, tpz;           // momentum of parent off the target
    int ptype, tptype;
    double LepPx, LepPy, LepPz;     // Lepton Momentum, initial
    double Elep, ElepSmeared; 		// Energy of the produced lepton
    double thetaLep, phiLep, thetaLepSmeared, phiLepSmeared; //angles in the detector of the produced lepton
    double POT;	//POT of the whole file.

    /*
    For more information on some of the neutrino parentage information, start here
    http://genie.hepforge.org/doxygen/html/classgenie_1_1flux_1_1GSimpleNtpNuMI.html
     */

    std::vector<std::vector<float> > eventReweight;   // multisim output weights
    
  };
  

}



#endif // GAN_NUANA_H
////////////////////////////////////////////////////////////////////////  