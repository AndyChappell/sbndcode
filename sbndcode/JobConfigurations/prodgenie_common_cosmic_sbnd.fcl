#
# File:    prodgenie_common_cosmic_sbnd.fcl
# Purpose: Base generation of neutrino events overlaid with cosmic rays
# Version: 1.1
# 
# This configuration runs event generation only, with neutrino events generated
# by Genie and with Corsika as cosmic ray generator.
# 
#  *********************************** BUG ***********************************
#  
#                         Corsika is currently disabled!
#                             No cosmic rays at all!
#  
#  *********************************** BUG ***********************************
# 
# TODO reintroduce Corsika when database files are available for SBND
# TODO rename GENIE flux files
# 
# Input: no input file required
# 
# Dependencies:
# - uses the bundle of SBND simulation services
# - will require flux files for Genie and Corsika
#
# Changes:
# 20160707 (petrillo@fnal.gov) [v1.1]
#   - uniformed to prodsingle_sbnd.fcl
#   - removed Corsika from execution path
#
#

#
# services
#

#include "services_sbnd.fcl"
#include "messages_sbnd.fcl"

#
# modules
#

#include "genie_sbnd.fcl"
#include "corsika_sbnd.fcl"

process_name: GenieGen


services: {
  
  TFileService:          { fileName: "prodgenie_common_cosmic_sbnd_%p-%tc_hists.root" }
  RandomNumberGenerator: {} # art random number generator manager
  
  # since this is a configuration expected to be run pro production,
  # we set up message configuration accordingly:
  message:               @local::sbnd_message_services_prod

                         @table::sbnd_resourcemonitorservices
  
  LArSeedService:        @local::sbnd_seedservice
                         @table::sbnd_geometry_services
  FileCatalogMetadata:   @local::sbnd_file_catalog_mc
  
} # services


# Start each new event with an empty event.
source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:      10          # Number of events to create
  firstRun:        1          # Run number to use for this file
  firstEvent:      1          # number of first event in the file
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
  {
    rns:       { module_type: "RandomNumberSaver" }
    generator: @local::sbnd_genie_simple
    corsika:   @local::sbnd_corsika_cmc
  }

  #define the producer and filter modules for this path, order matters, 
#  simulate:  [ rns, generator, corsika ] 
# 20160707 (petrillo@fnal.gov) - disabling Corsika until we can access its database files
  simulate:  [ rns, generator ] 

  #define the output stream, there could be more than one if using filters 
  stream1:   [ out1 ]

  #trigger_paths is a keyword and contains the paths that modify the art::event, 
  #ie filters and producers
  trigger_paths: [simulate] 

  #end_paths is a keyword and contains the paths that do not modify the art::Event, 
  #ie analyzers and output streams.  these all run simultaneously
  end_paths:     [stream1]  

} # physics


# block to define where the output goes.  if you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "prodgenie_common_cosmic_sbnd_%p-%tc.root" # default file name, can override from command line with -o or --output
    dataTier:    "generated"
    compressionLevel: 1
  }
} # outputs
