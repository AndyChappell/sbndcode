#include "services_refactored_sbnd.fcl"
##include "services_sbnd.fcl"
#include "detsimmodules_sbnd.fcl"
#include "opticaldetectormodules_sbnd.fcl"
# #include "CRT.fcl" #nina
#include "crtsimmodules_sbnd.fcl"

#include "analysis_tools_sbnd.fcl" 

#include "resourcemonitorservices_sbnd.fcl" 
#include "database_sbnd.fcl"

#include "largeantmodules_sbnd.fcl"

process_name: Detsim

services:
{
  TFileService: { fileName: "detsim_single_sbnd_hist.root" }
  
  #TimeTracker:       @local::sbnd_time_tracker
  TimeTracker:      @local::sbnd_resourcemonitorservices

  #MemoryTracker:     @local::sbnd_memory_tracker
  MemoryTracker:     @local::sbnd_resourcemonitorservices

  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::sbnd_simulation_services
}

services.Geometry.GDML: "sbnd_newLArG4.gdml"
services.Geometry.ROOT: "sbnd_newLArG4.gdml"

source:
{
  module_type: RootInput
  maxEvents: 30000
  fileNames: ["g4single_sbnd.root"]
}

physics:
{

 producers:
 {
   # daq:            @local::sbnd_detsim

   tpcrawdecoder : {
      module_type : WireCellToolkit
      wcls_main: {
         tool_type: WCLS
         apps: ["Pgrapher"]

         plugins: ["WireCellPgraph", "WireCellGen","WireCellSio","WireCellLarsoft"]

         # needs to be found via your WIRECELL_PATH 
         configs: ["pgrapher/experiment/pdsp/wcls-sim-drift-simchannel.jsonnet"]


         # Contract note: these exact "type:name" must be used to identify
         # the configuration data structures for these components in the Jsonnet.

         inputers: ["wclsSimDepoSource:"]
         outputers: [
            "wclsSimChannelSink:postdrift",
            "wclsFrameSaver:simdigits"
         ]

         # Make available parameters via Jsonnet's std.extVar()
         params: {
         }
         structs: {
           # Longitudinal diffusion constant [cm2/s]
           DL: 4.0
           # Transverse diffusion constant [cm2/s]
           DT: 8.8
           # Electron lifetime [ms]
           lifetime: 10.4
           # Electron drift speed, assumes a certain applied E-field [mm/us]
           driftSpeed: 1.565
         }
      }
   }

   simdrift : {
      module_type : SimDriftElectrons
      SimulationLabel : "IonAndScint"
   }

   opdigi:         @local::sbnd_opdigi
   crt:            @local::sbnd_crtsim      #nina   @local::CRTSimRefac_standard
   rns:            { module_type: "RandomNumberSaver" }
 }
 
 #simulate: [ rns, daq, opdigi, crt]
 simulate: [ rns, 
             # TPC simulation
             tpcrawdecoder,
             # OpDet and CRT simulation
             opdigi, crt,
	     # drifting electrons
	     simdrift ] 
 
 stream1:  [ out1 ]

 trigger_paths: [simulate] 

 end_paths:     [stream1]  
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_detsim.root"
   dataTier:    "detector-simulated"
   compressionLevel: 1 #zlib argument (0-9)
   fastCloning: true
   #basketSize: 8192 #[Byte] buffer size at 2k
   #splitLevel: 0 #reduces number of buffers
   #treeMaxVirtualSize: 1 #[Byte] limits number of buffers/branch to 1 (default is 10)
   outputCommands : [
     "keep *", "drop sim::SimEnergyDeposit*_*_*_*"
   ]
 }
}

# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::sbnd_detpedestalservice #nina    @local::sbnd_fixedpeds
#services.DetPedestalService: @local::sbnd_fixedpeds

# DetSim flags.
# physics.producers.daq.NoiseOn:     true
# physics.producers.daq.PedestalOn:  true
# physics.producers.daq.DistortOn:   false
# physics.producers.daq.SuppressOn:  false

# OpDetDigitizer label
physics.producers.opdigi.InputModule: "PDFastSim"

# DetSim services.
#services.SimChannelExtractService: @local::scxgeneric #nina
#services.ChannelNoiseService:      @local::chnoiseold #nina
#services.PedestalAdditionService:  @local::padprovided #nina
#services.AdcDistortService:        @local::stuckbits #nina
#services.AdcSuppressService:       @local::zslegacy #nina
#services.AdcCompressService:       @local::cmpblock #nina

# Labels
# physics.producers.daq.SimChannelLabel: "elecDrift" 

# Disable bad channels.
#services.IChannelStatusService.BadChannels: [ ]

#sbnd_largeantparameters.OpticalSimVerbosity: 0
