#
# File:    run_caentrigger.fcl
# Purpose: Simulates CAEN hardware trigger output
# Author:  
# Date:    
# Version: 1.0
#
# Input:
# - output from pmtTriggerProducer module
#
# Output:
# - triggered raw::OpDetWaveforms 


#include "services_sbnd.fcl"
#include "messages_sbnd.fcl"
#include "sam_sbnd.fcl"
#include "larfft_sbnd.fcl"
#include "signalservices_sbnd.fcl"
#include "simulationservices_sbnd.fcl"
#include "detsimmodules_sbnd.fcl"
#include "opdetdigitizer_sbnd.fcl"
#include "ophit_finder_sbnd.fcl"
#include "caentrigger.fcl"

#include "cluster_sbnd.fcl"
#include "trackfindermodules_sbnd.fcl"
#include "calorimetry_sbnd.fcl"
#include "showerfindermodules.fcl"
#include "databaseutil_sbnd.fcl"
#include "vertexfindermodules.fcl"



#include "rootoutput_sbnd.fcl"


process_name:   

services:
{
  # Load the service that manages root files for histograms.
  TFileService:              { fileName: "caenTrigger_hist.root" }
  @table::sbnd_detsim_services
  RandomNumberGenerator:     {}                                 # required by fuzzyCluster
  message:                   @local::sbnd_message_services_prod # from messages_sbnd.fcl
  FileCatalogMetadata:       @local::sbnd_file_catalog_mc       # from sam_sbnd.fcl
  LArFFT:                    @local::sbnd_larfft

  SignalShapingServiceSBND: @local::sbnd_signalshapingservice  # from signalservices_sbnd.fcl
}


#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}


#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    @table::sbnd_rootoutput
    dataTier: "reconstructed"
    SelectEvents:  [reco]
  }
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.


physics:
{

  producers:
  {
    # random number saver
    rns:       { module_type: RandomNumberSaver }
    opdaq:     @local::sbnd_opdetdigitizer
    # ophit:     @local::sbnd_ophit_finder_pmt
    pmttriggerproducer: @local::pmtTriggerProducer
    caentrigger: @local::CAENTriggerProducer
  }

  # define the producer and filter modules for this path, order matters,
  # filters reject all following items.  see lines starting physics.producers below
  reco: [rns, opdaq, pmttriggerproducer, caentrigger]

  # define the output stream, there could be more than one if using filters
  out:  [ out1 ]

  # trigger_paths is a keyword and contains the paths that modify the art::event,
  # ie filters and producers
  trigger_paths: [reco]

  # end_paths is a keyword and contains the paths that do not modify the art::Event,
  # ie analyzers and output streams.  these all run simultaneously
  end_paths:     [out]

}


### Some potential overwrites below

#physics.producers.pmttriggerproducer.PairLogic: "AND"

#physics.producers.fpred.OpHitProducer: "ophit"
#physics.producers.fpred.BeamWindowStart: -0.2       # in us
#physics.producers.fpred.BeamWindowEnd: 2.0   # in us
#physics.producers.fpred.ChargeToNPhotonsShower: 1.0
#physics.producers.fpred.ChargeToNPhotonsTrack: 1.0

#physics.producers.ophit.Area1pePMT:  1.3266    #in ADC*ns
#physics.producers.opdaq.QEDirect: 0.03
#physics.producers.opdaq.QERefl: 0.03
#physics.producers.opdaq.SinglePEmodel: true
#physics.producers.opdaq.PMTChargeToADC: -51.9