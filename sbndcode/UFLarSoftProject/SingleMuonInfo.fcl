#include "simulationservices_sbnd.fcl"
#include "backtrackerservice.fcl"
#include "particleinventoryservice.fcl"
#include "rootoutput_sbnd.fcl"
#include "crtt0matchingalg_sbnd.fcl"
#include "crttrackmatchingalg_sbnd.fcl"
#include "crtbacktracker_sbnd.fcl"

process_name: SingleMuonInfo

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "SingleMuonInfo.root" }
  RandomNumberGenerator: {}                     #ART native random number generator
  @table::sbnd_services
  #message:      @local::standard_info
  FileCatalogMetadata: @local::sbnd_file_catalog_mc
  ParticleInventoryService: @local::standard_particleinventoryservice
  BackTrackerService:  @local::standard_backtrackerservice
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "SingleMuonInfo.root"    #default file name, can override from command line with -o or --output
   dataTier: "reconstructed"
   fastCloning: false
 } 
}

physics:
{
 producers:{

  }
 filters:  {} 
 analyzers:{
   SingleMuonInfo:
   {
   module_type: "SingleMuonInfo"
 }
 }
 
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 ana:  [ SingleMuonInfo ]
 #ana: []
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [ stream1, ana ] 
 end_paths:     [  ana ] 
}

physics.analyzers.SingleMuonInfo.CRTBackTrack:@local::standard_crtbacktracker

#include "3drift_services_sbnd_legacy.fcl"

