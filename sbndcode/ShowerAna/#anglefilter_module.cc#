////////////////////////////////////////////////////////////////////////
// Class:       anglefilter
// Module Type: filter
// File:        anglefilter_module.cc
//
// Generated at Fri Sep  6 04:41:23 2019 by Dominic Barker using artmod
// from cetpkgsupport v1_14_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include "larsim/MCCheater/ParticleInventoryService.h"
#include "nusimdata/SimulationBase/MCTruth.h"
#include "canvas/Persistency/Common/Ptr.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"


#include <memory>

namespace shower {
  class anglefilter;
}

class shower::anglefilter : public art::EDFilter {
public:
  explicit anglefilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  anglefilter(anglefilter const &) = delete;
  anglefilter(anglefilter &&) = delete;
  anglefilter & operator = (anglefilter const &) = delete;
  anglefilter & operator = (anglefilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;


private:

  
};


shower::anglefilter::anglefilter(fhicl::ParameterSet const & pset): art::EDFilter{pset}
  // Initialize member data here.
{

}

bool shower::anglefilter::filter(art::Event & evt)
{
  const art::ServiceHandle<cheat::ParticleInventoryService> particleInventory;
  
  //List the particles in the event
  const sim::ParticleList& particles = particleInventory->ParticleList();
  
  for (sim::ParticleList::const_iterator particleIt = particles.begin(); particleIt != particles.end(); ++particleIt){
    const simb::MCParticle *particle = particleIt->second;
    
    if(particle->Mother() == 0){
      particle_map[particle->TrackId()] = particle;
    }
  }
  
  if(particle_map.find(1) != particle_map.end() && particle_map.find(0) != particle_map.end()){
    if((particle_map.at(0)->Momentum().Vect()).Angle(particle_map.at(1)->Momentum().Vect() > 0.087)){
      return true;
    }
  }
  
  return false;

}
		      


DEFINE_ART_MODULE(shower::anglefilter)
